# -*- coding: utf-8 -*-
"""g_optimization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ebH4_Hj2KYF5luWVoAeeWrA0N6QCFBj9
"""

import math
import numpy
import copy
from robot import Robot 

def requirements(robot: Robot):
  if(robot.max_speed_horizontal_flywheel()<0.1):
    return False
  if(robot.max_acceleration_horizontal_flywheel()<0.01):
    return False
  #if(robot.max_height_flywheel()<0.001):
   #r_flywheel (7.5,14)
  #  return False
  if(robot.max_sin_flywheel()<0.2):
    #r_flywheel (1,13)
    return False
  if(robot.max_speed_horizontal_pendulum()<1):
    #r_flywheel (1,14)
    return False
  if(robot.max_acceleration_horizontal_pendulum()<0.1):
    #r_flywheel (2.2,14)
    return False
  if(robot.max_sin_pendulum()<0.02):
    #r_flywheel (6.5,13)
    return False
  return True


def cost_function(robot: Robot):
  if(requirements(robot)):
    return robot.m_total() - robot.max_speed_horizontal_pendulum() - robot.max_acceleration_horizontal_flywheel()
  return 300.0

resolution = 700
r_flywheel_array=numpy.linspace(0.00,0.15,resolution)
best_robots :[Robot] = []
my_robot = Robot()
aux_robot = Robot()

from tqdm import tqdm
for r_f in tqdm(r_flywheel_array):
  aux_cost = 100.0
  to_save = False
  for w in numpy.linspace(0.0, 2*my_robot.r_external - 0.3, resolution):
    for r_w in numpy.linspace(r_f, my_robot.r_external, resolution):
      for N in range(2,7):
        my_robot.set_r_flywheel_r_wheel_w_N(r_f,r_w,w,N)
        if (cost_function(my_robot) < aux_cost):
          to_save = True
          aux_cost = cost_function(my_robot)
          aux_robot = copy.deepcopy(my_robot)
  if(to_save):
    best_robots.append(copy.deepcopy(aux_robot))

import matplotlib.pyplot as plt
plt.figure()
plt.title('sin(alpha) vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('sin(alpha)')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_sin_pendulum() for robot in best_robots])
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_sin_flywheel() for robot in best_robots])
plt.legend(['pendulum','flywheel','m_total'])

plt.figure()
plt.title('cost vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('cost')
plt.plot([robot.r_flywheel for robot in best_robots], [cost_function(robot) for robot in best_robots])
plt.legend(['cost'])

plt.figure()
plt.title('total mass vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('mass [kg]')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.m_total() for robot in best_robots])
plt.legend(['total mass'])

plt.figure()
plt.title('parameters vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('[m]')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.r_wheel for robot in best_robots])
plt.plot([robot.r_flywheel for robot in best_robots], [robot.w for robot in best_robots])
plt.legend(['wheel radius','w'])

plt.figure()
plt.title('N vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('masses')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.N for robot in best_robots])
plt.legend(['N'])

plt.figure()
plt.title('height obtained vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('height [m]')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_height_flywheel() for robot in best_robots])
plt.legend(['height'])

plt.figure()
plt.title('speed vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('speed [m/s]')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_speed_horizontal_pendulum() for robot in best_robots])
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_speed_horizontal_flywheel() for robot in best_robots])
plt.legend(['pendulum','flywheel'])

plt.figure()
plt.title('accelerations vs flywheel radius')
plt.xlabel('r flywheel [m]')
plt.ylabel('acceleration [m/s^2]')
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_acceleration_horizontal_pendulum() for robot in best_robots])
plt.plot([robot.r_flywheel for robot in best_robots], [robot.max_acceleration_horizontal_flywheel() for robot in best_robots])
plt.legend(['pendulum','flywheel'])

plt.show()